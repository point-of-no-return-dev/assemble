{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapNativeEventNames = mapNativeEventNames;\nexports.propFromEvent = propFromEvent;\nexports.withSetStateAllowed = withSetStateAllowed;\nexports.assertDomAvailable = assertDomAvailable;\nexports.displayNameOfNode = displayNameOfNode;\nexports.nodeTypeFromType = nodeTypeFromType;\nexports.isArrayLike = isArrayLike;\nexports.flatten = flatten;\nexports.ensureKeyOrUndefined = ensureKeyOrUndefined;\nexports.elementToTree = elementToTree;\nexports.findElement = findElement;\nexports.propsWithKeysAndRef = propsWithKeysAndRef;\nexports.getComponentStack = getComponentStack;\nexports.simulateError = simulateError;\nexports.getMaskedContext = getMaskedContext;\nexports.getNodeFromRootFinder = getNodeFromRootFinder;\nexports.wrapWithWrappingComponent = wrapWithWrappingComponent;\nexports.getWrappingComponentMountRenderer = getWrappingComponentMountRenderer;\nexports.fakeDynamicImport = fakeDynamicImport;\nexports.compareNodeTypeOf = compareNodeTypeOf;\nObject.defineProperty(exports, \"createMountWrapper\", {\n  enumerable: true,\n  get: function get() {\n    return _createMountWrapper[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"createRenderWrapper\", {\n  enumerable: true,\n  get: function get() {\n    return _createRenderWrapper[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"wrap\", {\n  enumerable: true,\n  get: function get() {\n    return _wrapWithSimpleWrapper[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"RootFinder\", {\n  enumerable: true,\n  get: function get() {\n    return _RootFinder[\"default\"];\n  }\n});\n\nvar _functionPrototype = _interopRequireDefault(require(\"function.prototype.name\"));\n\nvar _object = _interopRequireDefault(require(\"object.fromentries\"));\n\nvar _createMountWrapper = _interopRequireDefault(require(\"./createMountWrapper\"));\n\nvar _createRenderWrapper = _interopRequireDefault(require(\"./createRenderWrapper\"));\n\nvar _wrapWithSimpleWrapper = _interopRequireDefault(require(\"./wrapWithSimpleWrapper\"));\n\nvar _RootFinder = _interopRequireDefault(require(\"./RootFinder\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction mapNativeEventNames(event) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$animation = _ref.animation,\n      animation = _ref$animation === void 0 ? false : _ref$animation,\n      _ref$pointerEvents = _ref.pointerEvents,\n      pointerEvents = _ref$pointerEvents === void 0 ? false : _ref$pointerEvents,\n      _ref$auxClick = _ref.auxClick,\n      auxClick = _ref$auxClick === void 0 ? false : _ref$auxClick;\n\n  var nativeToReactEventMap = _objectSpread(_objectSpread(_objectSpread({\n    compositionend: 'compositionEnd',\n    compositionstart: 'compositionStart',\n    compositionupdate: 'compositionUpdate',\n    keydown: 'keyDown',\n    keyup: 'keyUp',\n    keypress: 'keyPress',\n    contextmenu: 'contextMenu',\n    dblclick: 'doubleClick',\n    doubleclick: 'doubleClick',\n    // kept for legacy. TODO: remove with next major.\n    dragend: 'dragEnd',\n    dragenter: 'dragEnter',\n    dragexist: 'dragExit',\n    dragleave: 'dragLeave',\n    dragover: 'dragOver',\n    dragstart: 'dragStart',\n    mousedown: 'mouseDown',\n    mousemove: 'mouseMove',\n    mouseout: 'mouseOut',\n    mouseover: 'mouseOver',\n    mouseup: 'mouseUp',\n    touchcancel: 'touchCancel',\n    touchend: 'touchEnd',\n    touchmove: 'touchMove',\n    touchstart: 'touchStart',\n    canplay: 'canPlay',\n    canplaythrough: 'canPlayThrough',\n    durationchange: 'durationChange',\n    loadeddata: 'loadedData',\n    loadedmetadata: 'loadedMetadata',\n    loadstart: 'loadStart',\n    ratechange: 'rateChange',\n    timeupdate: 'timeUpdate',\n    volumechange: 'volumeChange',\n    beforeinput: 'beforeInput',\n    mouseenter: 'mouseEnter',\n    mouseleave: 'mouseLeave',\n    transitionend: 'transitionEnd'\n  }, animation && {\n    animationstart: 'animationStart',\n    animationiteration: 'animationIteration',\n    animationend: 'animationEnd'\n  }), pointerEvents && {\n    pointerdown: 'pointerDown',\n    pointermove: 'pointerMove',\n    pointerup: 'pointerUp',\n    pointercancel: 'pointerCancel',\n    gotpointercapture: 'gotPointerCapture',\n    lostpointercapture: 'lostPointerCapture',\n    pointerenter: 'pointerEnter',\n    pointerleave: 'pointerLeave',\n    pointerover: 'pointerOver',\n    pointerout: 'pointerOut'\n  }), auxClick && {\n    auxclick: 'auxClick'\n  });\n\n  return nativeToReactEventMap[event] || event;\n} // 'click' => 'onClick'\n// 'mouseEnter' => 'onMouseEnter'\n\n\nfunction propFromEvent(event) {\n  var eventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var nativeEvent = mapNativeEventNames(event, eventOptions);\n  return \"on\".concat(nativeEvent[0].toUpperCase()).concat(nativeEvent.slice(1));\n}\n\nfunction withSetStateAllowed(fn) {\n  // NOTE(lmr):\n  // this is currently here to circumvent a React bug where `setState()` is\n  // not allowed without global being defined.\n  var cleanup = false;\n\n  if (typeof global.document === 'undefined') {\n    cleanup = true;\n    global.document = {};\n  }\n\n  var result = fn();\n\n  if (cleanup) {\n    // This works around a bug in node/jest in that developers aren't able to\n    // delete things from global when running in a node vm.\n    global.document = undefined;\n    delete global.document;\n  }\n\n  return result;\n}\n\nfunction assertDomAvailable(feature) {\n  if (!global || !global.document || !global.document.createElement) {\n    throw new Error(\"Enzyme's \".concat(feature, \" expects a DOM environment to be loaded, but found none\"));\n  }\n}\n\nfunction displayNameOfNode(node) {\n  if (!node) return null;\n  var type = node.type;\n  if (!type) return null;\n  return type.displayName || (typeof type === 'function' ? (0, _functionPrototype[\"default\"])(type) : type.name || type);\n}\n\nfunction nodeTypeFromType(type) {\n  if (typeof type === 'string') {\n    return 'host';\n  }\n\n  if (type && type.prototype && type.prototype.isReactComponent) {\n    return 'class';\n  }\n\n  return 'function';\n}\n\nfunction getIteratorFn(obj) {\n  var iteratorFn = obj && (typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol' && obj[Symbol.iterator] || obj['@@iterator']);\n\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n\n  return undefined;\n}\n\nfunction isIterable(obj) {\n  return !!getIteratorFn(obj);\n}\n\nfunction isArrayLike(obj) {\n  return Array.isArray(obj) || typeof obj !== 'string' && isIterable(obj);\n}\n\nfunction flatten(arrs) {\n  // optimize for the most common case\n  if (Array.isArray(arrs)) {\n    return arrs.reduce(function (flatArrs, item) {\n      return flatArrs.concat(isArrayLike(item) ? flatten(item) : item);\n    }, []);\n  } // fallback for arbitrary iterable children\n\n\n  var flatArrs = [];\n  var iteratorFn = getIteratorFn(arrs);\n  var iterator = iteratorFn.call(arrs);\n  var step = iterator.next();\n\n  while (!step.done) {\n    var item = step.value;\n    var flatItem = void 0;\n\n    if (isArrayLike(item)) {\n      flatItem = flatten(item);\n    } else {\n      flatItem = item;\n    }\n\n    flatArrs = flatArrs.concat(flatItem);\n    step = iterator.next();\n  }\n\n  return flatArrs;\n}\n\nfunction ensureKeyOrUndefined(key) {\n  return key || (key === '' ? '' : undefined);\n}\n\nfunction elementToTree(el) {\n  var recurse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : elementToTree;\n\n  if (typeof recurse !== 'function' && arguments.length === 3) {\n    // special case for backwards compat for `.map(elementToTree)`\n    recurse = elementToTree; // eslint-disable-line no-param-reassign\n  }\n\n  if (el === null || _typeof(el) !== 'object' || !('type' in el)) {\n    return el;\n  }\n\n  var type = el.type,\n      props = el.props,\n      key = el.key,\n      ref = el.ref;\n  var children = props.children;\n  var rendered = null;\n\n  if (isArrayLike(children)) {\n    rendered = flatten(children).map(function (x) {\n      return recurse(x);\n    });\n  } else if (typeof children !== 'undefined') {\n    rendered = recurse(children);\n  }\n\n  var nodeType = nodeTypeFromType(type);\n\n  if (nodeType === 'host' && props.dangerouslySetInnerHTML) {\n    if (props.children != null) {\n      var error = new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n      error.name = 'Invariant Violation';\n      throw error;\n    }\n  }\n\n  return {\n    nodeType: nodeType,\n    type: type,\n    props: props,\n    key: ensureKeyOrUndefined(key),\n    ref: ref,\n    instance: null,\n    rendered: rendered\n  };\n}\n\nfunction mapFind(arraylike, mapper, finder) {\n  var found;\n  var isFound = Array.prototype.find.call(arraylike, function (item) {\n    found = mapper(item);\n    return finder(found);\n  });\n  return isFound ? found : undefined;\n}\n\nfunction findElement(el, predicate) {\n  if (el === null || _typeof(el) !== 'object' || !('type' in el)) {\n    return undefined;\n  }\n\n  if (predicate(el)) {\n    return el;\n  }\n\n  var rendered = el.rendered;\n\n  if (isArrayLike(rendered)) {\n    return mapFind(rendered, function (x) {\n      return findElement(x, predicate);\n    }, function (x) {\n      return typeof x !== 'undefined';\n    });\n  }\n\n  return findElement(rendered, predicate);\n}\n\nfunction propsWithKeysAndRef(node) {\n  if (node.ref !== null || node.key !== null) {\n    return _objectSpread(_objectSpread({}, node.props), {}, {\n      key: node.key,\n      ref: node.ref\n    });\n  }\n\n  return node.props;\n}\n\nfunction getComponentStack(hierarchy) {\n  var getNodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nodeTypeFromType;\n  var getDisplayName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : displayNameOfNode;\n  var tuples = hierarchy.filter(function (node) {\n    return node.type !== _RootFinder[\"default\"];\n  }).map(function (x) {\n    return [getNodeType(x.type), getDisplayName(x)];\n  }).concat([['class', 'WrapperComponent']]);\n  return tuples.map(function (_ref2, i, arr) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        name = _ref3[1];\n\n    var _ref4 = arr.slice(i + 1).find(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n          nodeType = _ref7[0];\n\n      return nodeType !== 'host';\n    }) || [],\n        _ref5 = _slicedToArray(_ref4, 2),\n        closestComponent = _ref5[1];\n\n    return \"\\n    in \".concat(name).concat(closestComponent ? \" (created by \".concat(closestComponent, \")\") : '');\n  }).join('');\n}\n\nfunction simulateError(error, catchingInstance, rootNode, // TODO: remove `rootNode` next semver-major\nhierarchy) {\n  var getNodeType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : nodeTypeFromType;\n  var getDisplayName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : displayNameOfNode;\n  var catchingType = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var instance = catchingInstance || {};\n  var componentDidCatch = instance.componentDidCatch;\n  var getDerivedStateFromError = catchingType.getDerivedStateFromError;\n\n  if (!componentDidCatch && !getDerivedStateFromError) {\n    throw error;\n  }\n\n  if (getDerivedStateFromError) {\n    var stateUpdate = getDerivedStateFromError.call(catchingType, error);\n    instance.setState(stateUpdate);\n  }\n\n  if (componentDidCatch) {\n    var componentStack = getComponentStack(hierarchy, getNodeType, getDisplayName);\n    componentDidCatch.call(instance, error, {\n      componentStack: componentStack\n    });\n  }\n}\n\nfunction getMaskedContext(contextTypes, unmaskedContext) {\n  if (!contextTypes || !unmaskedContext) {\n    return {};\n  }\n\n  return (0, _object[\"default\"])(Object.keys(contextTypes).map(function (key) {\n    return [key, unmaskedContext[key]];\n  }));\n}\n\nfunction getNodeFromRootFinder(isCustomComponent, tree, options) {\n  if (!isCustomComponent(options.wrappingComponent)) {\n    return tree.rendered;\n  }\n\n  var rootFinder = findElement(tree, function (node) {\n    return node.type === _RootFinder[\"default\"];\n  });\n\n  if (!rootFinder) {\n    throw new Error('`wrappingComponent` must render its children!');\n  }\n\n  return rootFinder.rendered;\n}\n\nfunction wrapWithWrappingComponent(createElement, node, options) {\n  var wrappingComponent = options.wrappingComponent,\n      wrappingComponentProps = options.wrappingComponentProps;\n\n  if (!wrappingComponent) {\n    return node;\n  }\n\n  return createElement(wrappingComponent, wrappingComponentProps, createElement(_RootFinder[\"default\"], null, node));\n}\n\nfunction getWrappingComponentMountRenderer(_ref8) {\n  var toTree = _ref8.toTree,\n      getMountWrapperInstance = _ref8.getMountWrapperInstance;\n  return {\n    getNode: function getNode() {\n      var instance = getMountWrapperInstance();\n      return instance ? toTree(instance).rendered : null;\n    },\n    render: function render(el, context, callback) {\n      var instance = getMountWrapperInstance();\n\n      if (!instance) {\n        throw new Error('The wrapping component may not be updated if the root is unmounted.');\n      }\n\n      return instance.setWrappingComponentProps(el.props, callback);\n    }\n  };\n}\n\nfunction fakeDynamicImport(moduleToImport) {\n  return Promise.resolve({\n    \"default\": moduleToImport\n  });\n}\n\nfunction compareNodeTypeOf(node, matchingTypeOf) {\n  if (!node) {\n    return false;\n  }\n\n  return node.$$typeof === matchingTypeOf;\n} //# sourceMappingURL=Utils.js.map","map":null,"metadata":{},"sourceType":"module"}