{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/assemble/app/javascript/components/App.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Header from \"./Components/Header.js\";\nimport Footer from \"./Components/Footer.js\";\nimport Filter from \"./Components/Filter.js\";\nimport Landing from \"./Pages/Landing.js\";\nimport Index from \"./Pages/Index.js\";\nimport ProjectNew from \"./Pages/ProjectNew.js\";\nimport ProjectShow from \"./Pages/ProjectShow.js\";\nimport ProjectEdit from \"./Pages/ProjectEdit.js\";\nimport AboutUs from \"./Pages/AboutUs.js\";\nimport NotFound from \"./Pages/NotFound.js\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; // import mockApartments from './mockApartments.js'\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.projectIDCompare = function (project) {\n      var id = project.id;\n      var projectTechArr = _this.state.projectTechnologies;\n      console.log(\"this is the project id:\", id);\n      console.log(\"this is the project technologies\", projectTechArr);\n      var matchProj = projectTechArr.filter(function (project_id) {\n        return \"test\";\n      });\n      console.log(matchProj);\n    };\n\n    _this.isCurrentUserTheOwner = function (project) {\n      console.log(_this.state.membersBelongingToCurrentUser);\n      console.log(\"I'm Running\");\n      var isTheOwner = false;\n\n      _this.state.membersBelongingToCurrentUser.forEach(function (member) {\n        if (member.project_id === project.id && member.is_owner === true) {\n          isTheOwner = true;\n        }\n\n        return isTheOwner;\n      });\n\n      return isTheOwner;\n    };\n\n    _this.updateMembersBelongingToCurrentUser = function () {\n      //Get all of the members from the database\n      fetch(\"/members\").then(function (response) {\n        if (response.status === 200) {\n          console.log(\"status:\", response.status);\n          return response.json();\n        }\n      }).then(function (membersArray) {\n        var membersICareAbout = membersArray.filter(function (member) {\n          return member.user_id == _this.props.current_user.id;\n        });\n\n        _this.setState({\n          membersBelongingToCurrentUser: membersICareAbout\n        });\n      })[\"catch\"](function (errors) {\n        console.log(\"member errors:\", errors);\n      });\n    };\n\n    _this.updateCurrentFiltersSelected = function (filterOption) {\n      //Check to see if the filterOption is in the curentFiltersSelected\n      //If it is, create a new array that is a copy of the old state, minus the filteredOption\n      if (_this.state.currentFiltersSelected.includes(parseInt(filterOption))) {\n        //Declare an array of filters that we can alter\n        var newCurrentFiltersSelectedArray = _this.state.currentFiltersSelected;\n        console.log(\"alterable array\", newCurrentFiltersSelectedArray); //Delcare a variable for the index of filter options for readability\n\n        var filterIndex = newCurrentFiltersSelectedArray.indexOf(parseInt(filterOption));\n        console.log(\"filter index\", filterIndex); //Splice the selected options from the filtersArray\n\n        newCurrentFiltersSelectedArray.splice(filterIndex, 1);\n        console.log(\"after splice\", newCurrentFiltersSelectedArray); //setState to the updated array\n\n        _this.setState({\n          currentFiltersSelected: newCurrentFiltersSelectedArray\n        }); //If filterOption is not in state already, create a new array that adds the filterOption, and upstate\n\n      } else {\n        //Declare an array of filters that we can alter\n        var _newCurrentFiltersSelectedArray = _this.state.currentFiltersSelected;\n        console.log(\"hey i'm else\"); //Splice the selected options from the filtersArray\n\n        _newCurrentFiltersSelectedArray.push(parseInt(filterOption)); //setState to the updated array\n\n\n        _this.setState({\n          currentFiltersSelected: _newCurrentFiltersSelectedArray\n        });\n      }\n\n      _this.compareWithTech();\n    };\n\n    _this.compareWithTech = function () {\n      // Compare values in currentFiltersSelected with technology_id of project_technologies\n      // Returning filtered values that match each other based on value.technology_id array and the currentFiltersSelected array\n      console.log(_this.state.projectTechnologies);\n\n      var compareArr = _this.state.projectTechnologies.filter(function (value) {\n        return _this.state.currentFiltersSelected.includes(value.technology_id);\n      }); // gives us an array of ID's to find the projects we want shown\n\n\n      var projectsToBeShownIds = compareArr.map(function (value) {\n        return value.project_id;\n      }); // filters through all our projects and grabs all the projects with matching ID's in our projectsToBeShownIds array \n\n      var newIndex = _this.state.projects.filter(function (value) {\n        return projectsToBeShownIds.includes(value.id);\n      });\n\n      _this.setState({\n        projectsToBeShown: newIndex\n      });\n    };\n\n    _this.createNewProject = function (project, projectTechnologies) {\n      return fetch(\"/projects\", {\n        // converting an object to a string\n        body: JSON.stringify({\n          project: project,\n          projectTechnologies: projectTechnologies\n        }),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      }).then(function (response) {\n        // if the response is good  - reload the cats\n        if (response.status === 200) {\n          _this.componentDidMount();\n\n          console.log(\"create_project status:\", response.status);\n        }\n\n        return response;\n      })[\"catch\"](function (errors) {\n        console.log(\"create_project errors:\", errors);\n      });\n    };\n\n    _this.editProject = function (project, projectID) {\n      return fetch(\"/projects/\".concat(projectID), {\n        // converting an object to a string\n        body: JSON.stringify(project),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"PATCH\"\n      }).then(function (response) {\n        console.log(response.status); // if the response is good  - reload the cats\n\n        if (response.status === 200) {\n          _this.componentDidMount();\n\n          console.log(\"edit status:\", response.status);\n        }\n\n        return response;\n      })[\"catch\"](function (errors) {\n        console.log(\"edit errors:\", errors);\n      });\n    };\n\n    _this.deleteProject = function (project, projectID) {\n      fetch(\"/projects/\".concat(projectID), {\n        // converting an object to a string\n        body: JSON.stringify(project),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"DELETE\"\n      }).then(function (response) {\n        console.log(response.status); // if the response is good  - reload the cats\n\n        if (response.status === 200) {\n          _this.componentDidMount();\n\n          console.log(\"delete status:\", response.status);\n        }\n\n        return response;\n      })[\"catch\"](function (errors) {\n        console.log(\"delete errors:\", errors);\n      });\n    };\n\n    _this.createNewMember = function (member) {\n      return fetch(\"/members\", {\n        // converting an object to a string\n        body: JSON.stringify(member),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      }).then(function (response) {\n        // if the response is good  - reload the cats\n        if (response.status === 200) {\n          _this.componentDidMount();\n\n          console.log(\"create_member status:\", response.status);\n        }\n\n        return response;\n      })[\"catch\"](function (errors) {\n        console.log(\"create_member errors:\", errors);\n      });\n    };\n\n    _this.getProjectTechnologies = function () {\n      fetch(\"/project_technologies\").then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(function (projectTechArr) {\n        _this.setState({\n          projectTechnologies: projectTechArr\n        });\n      })[\"catch\"](function (errors) {\n        console.log(\"Project Technologies errors:\", errors);\n      });\n    };\n\n    _this.getTechnologies = function () {\n      fetch(\"/technologies\").then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(function (techArr) {\n        _this.setState({\n          technologies: techArr\n        });\n      })[\"catch\"](function (errors) {\n        console.log(\"Technologies errors:\", errors);\n      });\n    };\n\n    _this.state = {\n      projects: [],\n      technologies: [],\n      projectsToBeShown: [],\n      currentFiltersSelected: [],\n      projectTechnologies: [],\n      membersBelongingToCurrentUser: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"/projects\").then(function (response) {\n        if (response.status === 200) {\n          console.log(\"status:\", response.status);\n          return response.json();\n        }\n      }).then(function (projectArray) {\n        _this2.setState({\n          projects: projectArray\n        });\n      })[\"catch\"](function (errors) {\n        console.log(\"index errors:\", errors);\n      });\n      this.getProjectTechnologies(); // this.getTechnologies()\n\n      this.updateMembersBelongingToCurrentUser();\n    } // ********** CRUD METHODS FOR PROJECT TABLE ********** //\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          logged_in = _this$props.logged_in,\n          sign_in_route = _this$props.sign_in_route,\n          sign_out_route = _this$props.sign_out_route,\n          current_user = _this$props.current_user;\n      console.log(\"logged_in\", logged_in);\n      console.log(this.state.projects);\n      console.log(\"tech:\", this.state.technologies);\n      return /*#__PURE__*/React.createElement(Router, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        logged_in: logged_in,\n        sign_in_route: sign_in_route,\n        sign_out_route: sign_out_route,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(Landing, {\n            logged_in: logged_in,\n            sign_in_route: sign_in_route,\n            sign_out_route: sign_out_route,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/index\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(Index, {\n            updateCurrentFiltersSelected: _this3.updateCurrentFiltersSelected,\n            currentFiltersSelected: _this3.state.currentFiltersSelected,\n            projects: _this3.state.projects,\n            projectsToBeShown: _this3.state.projectsToBeShown,\n            logged_in: logged_in,\n            sign_in_route: sign_in_route,\n            sign_out_route: sign_out_route // Update State\n            ,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/project_show/:id\",\n        render: function render(props) {\n          var id = props.match.params.id;\n\n          var project = _this3.state.projects.find(function (project) {\n            return project.id === parseInt(id);\n          });\n\n          var technology = _this3.state.technologies.find(function (technology) {\n            return technologies.id === parseInt(id);\n          });\n\n          return /*#__PURE__*/React.createElement(ProjectShow, {\n            project: project,\n            technology: technology,\n            current_user: current_user,\n            isCurrentUserTheOwner: _this3.isCurrentUserTheOwner,\n            deleteProject: _this3.deleteProject,\n            projectIDCompare: _this3.projectIDCompare,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/project_edit/:id\",\n        render: function render(props) {\n          var id = props.match.params.id;\n\n          var project = _this3.state.projects.find(function (project) {\n            return project.id === parseInt(id);\n          });\n\n          return /*#__PURE__*/React.createElement(ProjectEdit, {\n            project: project,\n            editProject: _this3.editProject,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/project_new\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(ProjectNew //Make a createNewProject method to pass as a prop\n          , {\n            createNewProject: _this3.createNewProject,\n            current_user: current_user,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 15\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/aboutus\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(AboutUs, {\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        component: NotFound,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/assemble/app/javascript/components/App.js"],"names":["React","PropTypes","Header","Footer","Filter","Landing","Index","ProjectNew","ProjectShow","ProjectEdit","AboutUs","NotFound","BrowserRouter","Router","Route","Switch","App","props","projectIDCompare","project","id","projectTechArr","state","projectTechnologies","console","log","matchProj","filter","project_id","isCurrentUserTheOwner","membersBelongingToCurrentUser","isTheOwner","forEach","member","is_owner","updateMembersBelongingToCurrentUser","fetch","then","response","status","json","membersArray","membersICareAbout","user_id","current_user","setState","errors","updateCurrentFiltersSelected","filterOption","currentFiltersSelected","includes","parseInt","newCurrentFiltersSelectedArray","filterIndex","indexOf","splice","push","compareWithTech","compareArr","value","technology_id","projectsToBeShownIds","map","newIndex","projects","projectsToBeShown","createNewProject","body","JSON","stringify","headers","method","componentDidMount","editProject","projectID","deleteProject","createNewMember","getProjectTechnologies","getTechnologies","techArr","technologies","projectArray","logged_in","sign_in_route","sign_out_route","match","params","find","technology","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Header from \"./Components/Header.js\"\nimport Footer from \"./Components/Footer.js\"\nimport Filter from \"./Components/Filter.js\"\nimport Landing from \"./Pages/Landing.js\"\nimport Index from \"./Pages/Index.js\"\nimport ProjectNew from \"./Pages/ProjectNew.js\"\nimport ProjectShow from \"./Pages/ProjectShow.js\"\nimport ProjectEdit from \"./Pages/ProjectEdit.js\"\nimport AboutUs from \"./Pages/AboutUs.js\"\nimport NotFound from \"./Pages/NotFound.js\"\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n// import mockApartments from './mockApartments.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      projects: [],\n      technologies: [],\n      projectsToBeShown: [],\n      currentFiltersSelected: [],\n      projectTechnologies: [],\n      membersBelongingToCurrentUser: []\n    }\n  }\n\n  projectIDCompare = (project) => {\n    let id = project.id\n    let projectTechArr = this.state.projectTechnologies\n    console.log(\"this is the project id:\", id);\n    console.log(\"this is the project technologies\", projectTechArr);\n    let matchProj = projectTechArr.filter( project_id => {\n      return \"test\"\n    })\n    console.log(matchProj);\n  }\n\n  isCurrentUserTheOwner = (project) => {\n    console.log(this.state.membersBelongingToCurrentUser)\n    console.log(\"I'm Running\")\n    let isTheOwner = false;\n    this.state.membersBelongingToCurrentUser.forEach(member => {\n      if (member.project_id === project.id && member.is_owner === true) {\n        isTheOwner = true;\n      } \n      return isTheOwner;\n    })\n    return isTheOwner;\n  }\n\n  updateMembersBelongingToCurrentUser = () => {\n    //Get all of the members from the database\n    fetch(\"/members\")\n    .then(response => {\n      if(response.status === 200) {\n        console.log(\"status:\", response.status);\n        return response.json()\n      }\n    })\n      .then(membersArray => {\n        let membersICareAbout = membersArray.filter(member => {\n          return member.user_id == this.props.current_user.id\n        })\n        this.setState( {membersBelongingToCurrentUser: membersICareAbout} )\n      })\n      .catch(errors => {\n        console.log(\"member errors:\", errors)\n      })\n  }\n\n  updateCurrentFiltersSelected = (filterOption) => {\n    //Check to see if the filterOption is in the curentFiltersSelected\n    //If it is, create a new array that is a copy of the old state, minus the filteredOption\n    if (this.state.currentFiltersSelected.includes(parseInt(filterOption))) {\n      //Declare an array of filters that we can alter\n      let newCurrentFiltersSelectedArray = this.state.currentFiltersSelected;\n      console.log(\"alterable array\", newCurrentFiltersSelectedArray);\n      //Delcare a variable for the index of filter options for readability\n      let filterIndex = newCurrentFiltersSelectedArray.indexOf(parseInt(filterOption));\n      console.log(\"filter index\", filterIndex);\n      //Splice the selected options from the filtersArray\n      newCurrentFiltersSelectedArray.splice(filterIndex, 1); \n      console.log(\"after splice\", newCurrentFiltersSelectedArray);\n      //setState to the updated array\n      this.setState( {currentFiltersSelected: newCurrentFiltersSelectedArray})\n    //If filterOption is not in state already, create a new array that adds the filterOption, and upstate\n    } else {\n        //Declare an array of filters that we can alter\n        let newCurrentFiltersSelectedArray = this.state.currentFiltersSelected;\n        console.log(\"hey i'm else\");\n        //Splice the selected options from the filtersArray\n        newCurrentFiltersSelectedArray.push(parseInt(filterOption));\n        //setState to the updated array\n        this.setState( {currentFiltersSelected: newCurrentFiltersSelectedArray});\n    }\n    this.compareWithTech()\n  }\n   \n  // This method compares currentFiltersSelected with the Table project_technologies \n  // currentFiltersSelected, projectTechnologies\n  compareWithTech = () =>{\n    // Compare values in currentFiltersSelected with technology_id of project_technologies\n    // Returning filtered values that match each other based on value.technology_id array and the currentFiltersSelected array\n    console.log(this.state.projectTechnologies);\n    let compareArr = this.state.projectTechnologies.filter(value => {\n        return (this.state.currentFiltersSelected.includes(value.technology_id))\n        }\n    )\n    // gives us an array of ID's to find the projects we want shown\n    let projectsToBeShownIds = compareArr.map(value => {\n        return value.project_id\n    })\n    // filters through all our projects and grabs all the projects with matching ID's in our projectsToBeShownIds array \n    let newIndex = this.state.projects.filter(value => {\n      return (projectsToBeShownIds.includes(value.id))\n    })\n    this.setState( {projectsToBeShown: newIndex} );\n  }\n\n\n  componentDidMount() {\n    fetch(\"/projects\")\n    .then(response => {\n      if(response.status === 200) {\n        console.log(\"status:\", response.status);\n        return response.json()\n      }\n    })\n      .then(projectArray => {\n        this.setState({ projects: projectArray })\n      })\n      .catch(errors => {\n        console.log(\"index errors:\", errors)\n      })\n    this.getProjectTechnologies()\n    // this.getTechnologies()\n    this.updateMembersBelongingToCurrentUser()\n  }\n\n  // ********** CRUD METHODS FOR PROJECT TABLE ********** //\n  createNewProject = (project, projectTechnologies) => {\n    return fetch(\"/projects\", {\n      // converting an object to a string\n      body: JSON.stringify({project, projectTechnologies}),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"POST\"\n    })\n    .then(response => {\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n        console.log(\"create_project status:\", response.status);\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(\"create_project errors:\", errors)\n    })\n  }\n\n  \n  editProject = (project, projectID) => {\n    return fetch(`/projects/${projectID}`, {\n      // converting an object to a string\n      body: JSON.stringify(project),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"PATCH\"\n    })\n    .then(response => {\n      console.log(response.status)\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n        console.log(\"edit status:\", response.status);\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(\"edit errors:\", errors)\n    })\n  }\n  \n  deleteProject = (project, projectID) => {\n    fetch(`/projects/${projectID}`, {\n      // converting an object to a string\n      body: JSON.stringify(project),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"DELETE\"\n    })\n    .then(response => {\n      console.log(response.status)\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n        console.log(\"delete status:\", response.status);\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(\"delete errors:\", errors)\n    })\n  }\n  // ********** CRUD METHODS FOR MEMBER TABLE ********** //\n  createNewMember = (member) => {\n    return fetch(\"/members\", {\n      // converting an object to a string\n      body: JSON.stringify(member),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"POST\"\n    })\n    .then(response => {\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n        console.log(\"create_member status:\", response.status);\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(\"create_member errors:\", errors)\n    })\n  }\n\n  // ********** CRUD METHODS FOR PROJECT-TECHNOLOGY TABLE ********** //\n  getProjectTechnologies = () => {\n    fetch(\"/project_technologies\")\n    .then(response =>{\n      if(response.status === 200){\n        return response.json()\n      }\n    })\n    .then(projectTechArr =>{\n      this.setState({projectTechnologies: projectTechArr})\n    })\n    .catch(errors => {\n      console.log(\"Project Technologies errors:\", errors);\n    })\n  }\n\n\n\n  // Gets an array of all technologies\n  getTechnologies = () => {\n    fetch(\"/technologies\")\n    .then(response =>{\n      if(response.status === 200){\n        return response.json()\n      }\n    })\n    .then(techArr =>{\n      this.setState({technologies: techArr})\n    })\n    .catch(errors => {\n      console.log(\"Technologies errors:\", errors);\n    })\n  }\n\n  render () {\n    const {\n      logged_in,\n      sign_in_route,\n      sign_out_route,\n      current_user\n    } = this.props\n    console.log(\"logged_in\", logged_in);\n    console.log(this.state.projects);\n    console.log(\"tech:\", this.state.technologies);\n    return (\n      <Router>\n        <Header\n          logged_in={ logged_in }\n          sign_in_route={ sign_in_route }\n          sign_out_route={ sign_out_route }\n        />\n        <Switch>\n\n          <Route\n            exact path=\"/\"\n            render={ (props) =>\n              <Landing\n                logged_in={ logged_in }\n                sign_in_route={ sign_in_route }\n                sign_out_route={ sign_out_route }\n              />\n            }\n          />\n\n          <Route\n            path=\"/index\"\n            render={ (props) =>\n              <Index\n                updateCurrentFiltersSelected = { this.updateCurrentFiltersSelected }\n                currentFiltersSelected = { this.state.currentFiltersSelected }\n                projects = { this.state.projects }\n                projectsToBeShown = { this.state.projectsToBeShown }\n                logged_in={ logged_in }\n                sign_in_route={ sign_in_route }\n                sign_out_route={ sign_out_route }\n                // Update State\n              />\n              \n            }\n          />\n\n          <Route\n            path={\"/project_show/:id\"}\n            render={ (props) => {\n              let id = props.match.params.id\n              let project = this.state.projects.find(project => project.id === parseInt(id))\n              let technology = this.state.technologies.find(technology => technologies.id === parseInt(id))\n              return (\n                <ProjectShow \n                  project = {project}\n                  technology = {technology}\n                  current_user={current_user}\n                  isCurrentUserTheOwner = {this.isCurrentUserTheOwner}\n                  deleteProject = {this.deleteProject}\n                  projectIDCompare = {this.projectIDCompare}\n                />\n              )\n            }}\n          />\n          \n          <Route\n            path={\"/project_edit/:id\"}\n            render={ (props) => {\n              let id = props.match.params.id\n              let project = this.state.projects.find(project => project.id === parseInt(id))\n              return (\n                <ProjectEdit \n                  project = {project}\n                  editProject = {this.editProject}\n                />\n              )\n            }}\n          />\n          <Route\n            path=\"/project_new\"\n            render={ (props) =>\n              <ProjectNew\n                //Make a createNewProject method to pass as a prop\n                createNewProject={this.createNewProject}\n                current_user={current_user}\n              />\n            }\n          />\n          <Route \n            path=\"/aboutus\"\n            render={ (props) =>\n              <AboutUs/>\n            }\n          />\n          <Route component={ NotFound }/>\n        </Switch>\n        <Footer />\n      </Router>\n    );\n  }\n}\n\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}