{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar AddEntriesFromIterable = require('es-abstract/2019/AddEntriesFromIterable');\n\nvar CreateDataPropertyOrThrow = require('es-abstract/2019/CreateDataPropertyOrThrow');\n\nvar Get = require('es-abstract/2019/Get');\n\nvar IsArray = require('es-abstract/2019/IsArray');\n\nvar RequireObjectCoercible = require('es-abstract/2019/RequireObjectCoercible');\n\nvar ToPropertyKey = require('es-abstract/2019/ToPropertyKey');\n\nvar Type = require('es-abstract/2019/Type');\n\nvar adder = function addDataProperty(key, value) {\n  var O = this; // eslint-disable-line no-invalid-this\n\n  var propertyKey = ToPropertyKey(key);\n  CreateDataPropertyOrThrow(O, propertyKey, value);\n};\n\nvar legacyAssign = function assign(obj, entries) {\n  for (var i = 0; i < entries.length; ++i) {\n    var entry = entries[i];\n\n    if (Type(entry) !== 'Object') {\n      throw new TypeError('iterator returned a non-object; entry expected');\n    }\n\n    var key = Get(entry, '0');\n    var value = Get(entry, '1');\n    var propertyKey = ToPropertyKey(key);\n    CreateDataPropertyOrThrow(obj, propertyKey, value);\n  }\n};\n\nvar hasSymbols = typeof Symbol === 'function' && _typeof(Symbol('foo')) === 'symbol';\n\nmodule.exports = function fromEntries(iterable) {\n  RequireObjectCoercible(iterable);\n  var obj = {}; // this part isn't in the spec, it's for a reasonable fallback for pre-ES6 environments\n\n  if (!hasSymbols) {\n    if (!IsArray(iterable)) {\n      throw new TypeError('this environment lacks native Symbols, and can not support non-Array iterables');\n    }\n\n    legacyAssign(obj, iterable);\n    return obj;\n  }\n\n  return AddEntriesFromIterable(obj, iterable, adder);\n};","map":null,"metadata":{},"sourceType":"module"}